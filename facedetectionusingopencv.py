# -*- coding: utf-8 -*-
"""FaceDetectionUsingOpenCV.ipynb

Automatically generated by Colab.

"""

# Import the necessary libraries
import numpy as np
import cv2
import matplotlib.pyplot as plt

# Function to convert BGR images to RGB
def convertToRGB(image):
    return cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Load the Haar cascade classifier for frontal face detection
haar_cascade_face = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_alt2.xml')

# Generalized function for face detection
def detect_faces(cascade, test_image, scaleFactor=1.1, minNeighbors=5):
    # Create a copy of the image to prevent changes to the original
    image_copy = test_image.copy()

    # Convert the test image to grayscale as Haar Cascade expects grayscale images
    gray_image = cv2.cvtColor(image_copy, cv2.COLOR_BGR2GRAY)

    # Apply the Haar Cascade classifier to detect faces
    faces_rect = cascade.detectMultiScale(gray_image, scaleFactor=scaleFactor, minNeighbors=minNeighbors)

    # Draw rectangles around detected faces
    for (x, y, w, h) in faces_rect:
        cv2.rectangle(image_copy, (x, y), (x+w, y+h), (0, 255, 0), 2)

    return image_copy, len(faces_rect)

# Face detection in static images
def detect_faces_in_image(image_path):
    # Load the image
    test_image = cv2.imread(image_path)
    if test_image is None:
        print(f"Error: Unable to load image at {image_path}. Please check the path.")
        return

    # Detect faces
    faces, num_faces = detect_faces(haar_cascade_face, test_image)

    # Print the number of faces detected
    print(f"Faces found: {num_faces}")

    # Convert to RGB for display
    plt.imshow(convertToRGB(faces))
    plt.axis('off')
    plt.show()

    # Save the output image
    cv2.imwrite('detected_faces.png', faces)

# Live camera face detection
def live_camera_face_detection():
    # Initialize the webcam
    video_capture = cv2.VideoCapture(0)

    if not video_capture.isOpened():
        print("Error: Unable to access the camera.")
        return

    print("Press 'q' to quit the live feed.")

    while True:
        # Capture frame-by-frame
        ret, frame = video_capture.read()
        if not ret:
            print("Error: Unable to capture video.")
            break

        # Detect faces in the current frame
        faces_frame, _ = detect_faces(haar_cascade_face, frame)

        # Display the resulting frame
        cv2.imshow('Live Face Detection', faces_frame)

        # Break the loop when 'q' is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Release the capture and close windows
    video_capture.release()
    cv2.destroyAllWindows()

# Example usage:
# Detect faces in a static image
print("Detecting faces in an image...")
detect_faces_in_image('baby1.jpg')  # Change to your test image path

# Start live camera face detection
print("Starting live camera face detection...")
live_camera_face_detection()

# Import the necessary libraries
import numpy as np
import cv2
import matplotlib.pyplot as plt
get_ipython().magic('matplotlib inline')

#  Loading the image to be tested
test_image = cv2.imread('Pic.webp')

# Converting to grayscale as opencv expects detector takes in input gray scale images
test_image_gray = cv2.cvtColor(test_image, cv2.COLOR_BGR2GRAY)

# Displaying grayscale image
plt.imshow(test_image_gray, cmap='gray')

# Since we know that OpenCV loads an image in BGR format so we need to convert it into RBG format to be able to display its true colours. Let us write a small function for that.
def convertToRGB(image):
    return cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# # Haar cascade files

# Loading the classifier for frontal face


haar_cascade_face = cv2.CascadeClassifier('/content/haarcascade_frontalface_default.xml')

# # Face detection
faces_rects = haar_cascade_face.detectMultiScale(test_image_gray, scaleFactor = 1.2, minNeighbors = 7);

# Let us print the no. of faces found
print('Faces found: ', len(faces_rects))

# Our next step is to loop over all the co-ordinates it returned and draw rectangles around them using Open CV.We will be drawing a green rectangle with thicknessof 2
for (x,y,w,h) in faces_rects:
     cv2.rectangle(test_image, (x, y), (x+w, y+h), (0, 255, 0), 2)

# Finally, we shall display the original image in coloured to see if the face has been detected correctly or not.


#convert image to RGB and show image
plt.imshow(convertToRGB(test_image))

#  Let us create a generalised function for the entire face detection process.


def detect_faces(cascade, test_image, scaleFactor = 1.1):
    # create a copy of the image to prevent any changes to the original one.
    image_copy = test_image.copy()

    #convert the test image to gray scale as opencv face detector expects gray images
    gray_image = cv2.cvtColor(image_copy, cv2.COLOR_BGR2GRAY)

    # Applying the haar classifier to detect faces
    faces_rect = cascade.detectMultiScale(gray_image, scaleFactor=scaleFactor, minNeighbors = 5)

    for (x, y, w, h) in faces_rect:
        cv2.rectangle(image_copy, (x, y), (x+w, y+h), (0, 255, 0), 15)

    return image_copy

# Testing the function on new image


#loading image
test_image2 = cv2.imread('/content/test2.jpeg')

#call the function to detect faces
faces = detect_faces(haar_cascade_face, test_image2)

#convert to RGB and display image
plt.imshow(convertToRGB(faces))

# Saving the final image

cv2.imwrite('image1.png',faces)
